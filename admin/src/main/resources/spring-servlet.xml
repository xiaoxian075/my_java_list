<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
  			http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc.xsd
       		http://www.springframework.org/schema/context
       		http://www.springframework.org/schema/context/spring-context.xsd"
	default-lazy-init="false">
	
	
	

	<!-- 添加注解驱动 -->
	<mvc:annotation-driven>
		<mvc:message-converters>     
	        <bean class="org.springframework.http.converter.StringHttpMessageConverter">     
	            <property name="supportedMediaTypes">     
	                <list>     
	                    <value>text/plain;charset=UTF-8</value>     
	                    <value>text/html;charset=UTF-8</value>     
	                </list>     
	            </property>     
	        </bean>      
	    </mvc:message-converters>
	</mvc:annotation-driven>
	<mvc:resources location="/" mapping="/**/*.txt"/> 
	<mvc:resources location="/" mapping="/**/*.js"/> 
	
	<!-- 默认扫描的包路径 -->
	<context:component-scan base-package="admin" />
	
	<!-- mvc:view-controller可以在不需要Controller处理request的情况，转向到设置的View -->
	<!-- 像下面这样设置，如果请求为/，则不通过controller，而直接解析为/index.jsp -->
	<mvc:view-controller path="/" view-name="index" />
	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
		<!-- 配置jsp路径前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<!-- 配置URl后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	
	  <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
<!--         <property name="location" value="classpath:jdbc.properties" />   -->
			<property name="locations">
			<list>
				<!-- 这里支持多种寻址方式：classpath和file -->
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
				<!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
			</list>
		</property>
    </bean> 
	
	<import resource="spring-mybatis.xml" />
	
	
	<!-- redis  config  start -->
	<!-- 配置JedisPoolConfig实例 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>
	
	<!-- 配置JedisConnectionFactory -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"/>
		<property name="port" value="${redis.port}"/>
		<property name="password" value="${redis.pass}"/>
		<property name="database" value="${redis.dbIndex}"/>
		<property name="poolConfig" ref="poolConfig"/>
	</bean>
	
	<!-- 配置RedisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"/>
	</bean>
	
	<!-- 配置RedisCacheManager -->
	<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
	     <constructor-arg name="redisOperations" ref="redisTemplate" />
		<property name="defaultExpiration" value="${redis.expiration}"/>
	</bean>
	
	<!-- 配置RedisCacheConfig -->
<!-- 	<bean id="redisCacheConfig" class="com.cache.redis.RedisCacheConfig">
		<constructor-arg ref="jedisConnectionFactory" />
		<constructor-arg ref="redisTemplate" />
		<constructor-arg ref="redisCacheManager" />
	</bean> -->
	
	<bean id="redisIto;" class="com.cache.redis.Redis">
		<property name="connectionFactory" ref="jedisConnectionFactory"/>
		<property name="redisOperations" ref="redisTemplate" />
		<property name="redisCacheManager" ref="redisCacheManager" />
	</bean>
	
	<!-- redis  config  end -->
	
</beans>